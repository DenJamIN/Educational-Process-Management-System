services:
  # PostgreSQL
  postgres:
    build:
      context: ./databases/postgresql
      dockerfile: Dockerfile
    container_name: education_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: edu_user
      POSTGRES_PASSWORD: securepassword
      POSTGRES_DB: education_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - education_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U edu_user -d education_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongo:
    build:
      context: ./databases/mongo
      dockerfile: Dockerfile
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - education_network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - education_network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    networks:
      - education_network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.4.0
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"   # Spark Master Port
      - "8083:8080"   # Spark Master Web UI (внешний порт 8083 будет перенаправлен на внутренний 8080)
    networks:
      - education_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.4.0
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"   # Spark Worker Web UI
    networks:
      - education_network

  # Spark Application
  spark-app:
    build: ./spark
    depends_on:
      - spark-master
      - kafka
      - postgres
      - mongo
      - web-api
    volumes:
      - ./data:/data
    networks:
      - education_network

  # Kafka Consumer Group
  kafka-consumer:
    build: ./kafka_consumer
    depends_on:
      - kafka
      - mongo
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: education_topic
      GROUP_ID: education_consumer_group
      MONGO_URI: mongodb://mongo:27017/
      MONGO_DB: education_db
      MONGO_COLLECTION: courses
    networks:
      - education_network

  # Web API
  web-api:
    build:
      context: ./web-api
      dockerfile: Dockerfile
    container_name: education_web_api
    ports:
      - "8000:8000"   # Изменено с 8080 на 8000, чтобы избежать конфликта с Spark Master Web UI
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data_exports:/app/data_exports
    networks:
      - education_network

  # JMeter для нагрузочного тестирования
  jmeter:
    build: ./jmeter
    depends_on:
      - web-api
      - kafka
      - postgres
      - mongo
    volumes:
      - ./jmeter/results:/tests/results
    entrypoint: ["jmeter", "-n", "-t", "/tests/test_plan.jmx", "-l", "/tests/results/results.jtl"]
    networks:
      - education_network

volumes:
  postgres_data:
  mongo_data:

networks:
  education_network:
    driver: bridge

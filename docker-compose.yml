services:
  postgres:
    build:
      context: ./databases/postgresql
      dockerfile: Dockerfile
    container_name: education_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: edu_user
      POSTGRES_PASSWORD: securepassword
      POSTGRES_DB: education_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - education_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U edu_user -d education_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  web-api:
    build:
      context: ./web-api
      dockerfile: Dockerfile
    container_name: education_web_api
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data_exports:/app/data_exports
    networks:
      - education_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - education_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - education_network

  spark:
    build:
      context: ./spark-structured-streaming
      dockerfile: Dockerfile
    container_name: spark_streaming_app
    volumes:
      - ./data_exports:/app/data_exports
      - ./spark-checkpoints:/app/checkpoints
    depends_on:
      - kafka
    networks:
      - education_network

  mongo:
    build:
      context: ./databases/mongo
      dockerfile: Dockerfile
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - education_network

  kafka-consumer:
    build:
      context: ./kafka-consumer-app
      dockerfile: Dockerfile
    container_name: kafka_consumer_app
    depends_on:
      - kafka
      - mongo
    networks:
      - education_network

volumes:
  postgres_data:
  mongo_data:
  spark-checkpoints:

networks:
  education_network:
    driver: bridge